{
	"platform": "linux",
		"queries": {
		"@shell_history": {
			"query": "select * from users join shell_history using (uid);",
			"interval": 60,
			"description": "List shell_history for each users on the system - ATT&CK "
					},
"running-process": {
      "query" : "SELECT  datetime(p.start_time, 'unixepoch', 'localtime') AS start_time ,p.name AS process, p.pid AS process_id, p.pgroup AS process_group, p.state AS process_state, p.cmdline, p.cwd, p.on_disk, p.resident_size AS mem_used, p.user_time, p.system_time, (SELECT strftime('%s','now')-ut.total_seconds+p.start_time FROM uptime AS ut) AS process_start_time, p.parent AS parent_process_id, pp.name AS parent_process, g.groupname AS 'group', g.gid AS group_id, u.username AS user, u.uid AS user_id, eu.username AS effective_username, eg.groupname AS effective_groupname, p.path, h.md5 AS md5, h.sha1 AS sha1, h.sha256 AS sha256, '__JSONIFY__'||(SELECT json_group_array(json_object('fd',pof.fd, 'path',pof.path)) FROM process_open_files AS pof WHERE pof.pid=p.pid GROUP BY pof.pid) AS open_files, '__JSONIFY__'||(SELECT json_group_array(json_object('variable_name',pe.key, 'value',pe.value)) FROM process_envs AS pe WHERE pe.pid=p.pid GROUP BY pe.pid) AS environment FROM processes AS p LEFT JOIN processes AS pp ON p.parent=pp.pid LEFT JOIN users AS u ON p.uid=u.uid LEFT JOIN users AS eu ON p.euid=eu.uid LEFT JOIN groups AS g ON p.gid=g.gid LEFT JOIN groups AS eg ON p.gid=eg.gid LEFT JOIN hash AS h ON p.path=h.path WHERE p.parent IS NOT 2 AND (process >0 OR p.parent > 0 );",
      "interval" : "60",
      "platform": "linux",
       "description" : "Retrieves the list of all the currently logged in users in the target system."
         },

         "established_outbound": {
      "query" : "SELECT  datetime(p.start_time, 'unixepoch', 'localtime') AS start_time , pos.state AS connection_state, CASE pos.family WHEN 2 THEN 'ipv4' WHEN 10 THEN 'ipv6' ELSE pos.family END AS family, h.md5 AS md5, h.sha1 AS sha1, h.sha256 AS sha256, h.directory AS directory, pos.local_address AS src_connection_ip, pos.local_port AS src_connection_port, pos.remote_port AS dest_connection_port, pos.remote_address AS dest_connection_ip, p.name AS process, p.pid AS process_id, p.parent AS parent_process_id, pp.name AS parent_process, p.path AS file_path, f.size AS file_size, p.cmdline AS cmdline, u.uid AS user_id, u.username AS user, CASE pos.protocol WHEN 6 THEN 'tcp' WHEN 17 THEN 'udp' ELSE pos.protocol END AS transport FROM process_open_sockets AS pos JOIN processes AS p ON p.pid=pos.pid LEFT JOIN processes AS pp ON p.parent=pp.pid LEFT JOIN users AS u ON p.uid=u.uid  LEFT JOIN hash AS h ON h.path=p.path LEFT JOIN file AS f ON f.path=p.path WHERE NOT pos.remote_address='' AND NOT pos.remote_address='::' AND NOT pos.remote_address='::1' AND NOT pos.remote_address='0.0.0.0' AND NOT pos.remote_address='127.0.0.1' AND (pos.local_port,pos.protocol) NOT IN (SELECT lp.port, lp.protocol FROM listening_ports AS lp);",
      "interval" : "60",
      "platform": "linux",
       "description" : "Retrieves the list of all the currently logged in users in the target system."
         },


         "remote@+@connections":{
	  "query": "SELECT liu.* ,datetime(p.start_time, 'unixepoch', 'localtime') AS start_time,  pos.* ,p.cmdline, (CASE family  WHEN 2 THEN 'IP4'   WHEN 10 THEN 'IP6'   ELSE family END) AS family, (CASE protocol WHEN 27 THEN 'RDP' WHEN 6 THEN 'TCP'  WHEN 17 THEN 'UDP' ELSE protocol END) AS protocol, local_address, local_port,remote_address, remote_port, COALESCE(NULLIF(pos.path,''), p.path) AS path FROM process_open_sockets AS pos INNER JOIN processes AS p ON p.pid = pos.pid  join logged_in_users liu  WHERE liu.pid = p.pid  AND type='user' AND remote_port != 0  ; ",
	  "interval":60,
	  "description": "socket  remote connections and process join "
		  },

"bpfprocess@_@audit":{
      "query": "select bpf.* , pp.name as parentname, p.name AS process, pp.cmdline as parentcmdline, u.shell, u.type , datetime(p.start_time, 'unixepoch', 'localtime') AS start_time_process , p.state AS process_state, g.groupname AS 'group', g.gid AS group_id, u.username AS user, u.uid AS user_id, u.username AS effective_username, g.groupname AS effective_groupname , bpf.path, h.md5 AS md5, h.sha1 AS sha1, h.sha256 AS sha256  FROM bpf_process_events as bpf inner join processes as p on  bpf.pid=p.pid join processes pp on  bpf.parent = pp.pid  inner join users u on bpf.uid=u.uid  LEFT JOIN groups AS g ON bpf.gid=g.gid LEFT JOIN hash AS h ON bpf.path=h.path  AND (process NOTNULL OR p.parent NOTNULL) AND  bpf.path NOT IN ('/bin/sed', '/usr/bin/tr', '/bin/gawk', '/bin/date', '/bin/mktemp', '/usr/bin/dirname', '/usr/bin/head', '/usr/bin/jq', '/bin/cut', '/bin/uname', '/bin/basename') and bpf.cmdline NOT LIKE '%_key%' AND bpf.cmdline NOT LIKE '%secret%' AND bpf.pid > 0 ;",
      "interval": 60,
      "description": "Process bpf-events  parentname and process"
          },


           "@events_audit":{
      "query": "SELECT DISTINCT pv.* ,datetime(p.start_time, 'unixepoch', 'localtime') AS start_time,  p.name, pp.name as parentname, pp.cmdline as parentcmdline , directory,username ,  description FROM process_events  as pv inner join users on pv.uid=users.uid join processes p on p.pid=pv.pid join processes pp  on  p.parent = pp.pid  WHERE pv.path NOT IN ('/bin/sed', '/usr/bin/tr', '/bin/gawk', '/bin/date', '/bin/mktemp', '/usr/bin/dirname', '/usr/bin/head', '/usr/bin/jq', '/bin/cut', '/bin/uname', '/bin/basename') and pv.cmdline NOT LIKE '%_key%' AND pv.cmdline NOT LIKE '%secret%' AND pv.pid > 0 ;",
      "interval": 60,
      "description": "Process events collected from the audit framework for old kernel "
          },

"process@+@parent":{
	  "query": "select  p.* ,p.name AS process, u.uid, datetime(p.start_time, 'unixepoch', 'localtime') AS start_time ,  u.username, u.type as usertype, pp.name as parentname, pp.cmdline as parentcmdline , g.groupname AS 'group', g.gid AS group_id, u.username AS user, u.uid AS user_id, u.username AS effective_username, eg.groupname AS effective_groupname, p.path,'__JSONIFY__'||(SELECT json_group_array(json_object('fd',pof.fd, 'path',pof.path)) FROM process_open_files AS pof WHERE pof.pid=p.pid GROUP BY pof.pid) AS open_files, h.md5 AS md5, h.sha1 AS sha1, h.sha256 AS sha256 from processes  p join users u on  p.uid = u.uid  join processes pp  on  p.parent = pp.pid   LEFT JOIN groups AS g ON p.gid=g.gid LEFT JOIN groups AS eg ON p.gid=eg.gid LEFT JOIN hash AS h ON p.path=h.path  WHERE p.parent IS NOT 2 AND (process NOTNULL OR p.parent NOTNULL) AND p.path NOT IN ('/bin/sed', '/usr/bin/tr', '/bin/gawk', '/bin/date', '/bin/mktemp', '/usr/bin/dirname', '/usr/bin/head', '/usr/bin/jq', '/bin/cut', '/bin/uname', '/bin/basename') and p.cmdline NOT LIKE '%_key%' AND p.cmdline NOT LIKE '%secret%'  AND p.pid > 0 ;",
 "interval":60,
	  "description": "socket connections and process join "
		  },


    "sockets_connect":{
	  "query": "SELECT pos.* ,datetime(p.start_time, 'unixepoch', 'localtime') AS start_time , (CASE family  WHEN 2 THEN 'IP4'   WHEN 10 THEN 'IP6'   ELSE family END) AS family, (CASE protocol WHEN 27 THEN 'RDP' WHEN 6 THEN 'TCP'  WHEN 17 THEN 'UDP' ELSE protocol END) AS protocol, local_address, local_port,remote_address, remote_port, COALESCE(NULLIF(pos.path,''), p.path) AS path FROM process_open_sockets AS pos INNER JOIN processes AS p ON p.pid = pos.pid WHERE remote_port != 0  AND pos.pid > 0; ",
	  "interval":60,
	  "description": "socket connections and process join "
		  },


 "bpfsocket_@+@":{
      "query": "select s.* ,(CASE family  WHEN 2 THEN 'IP4'   WHEN 10 THEN 'IP6'   ELSE family END) AS family, (CASE protocol WHEN 27 THEN 'RDP' WHEN 6 THEN 'TCP'  WHEN 17 THEN 'UDP' ELSE protocol END ) AS protocol,   username from bpf_socket_events s inner  join users on s.uid=users.uid  WHERE  s.path NOT IN ('/usr/bin/hostname') AND  s.remote_port != 0 ;",
"interval": 60,
      "description": "bpf_socket_events"
          },


    "local_user_accounts:": {
      "query" : "SELECT t.unix_time AS query_time, datetime(t.unix_time, 'unixepoch', 'localtime') AS query_Ltime ,u.uid AS user_id, u.username AS user, u.description AS name, u.gid AS group_id, g.groupname AS 'group', (SELECT group_concat(gs.groupname) FROM user_groups AS ugs LEFT JOIN groups AS gs ON gs.gid=ugs.gid WHERE u.uid=ugs.uid  GROUP BY ugs.uid) AS all_groups, (SELECT group_concat(gs.gid) FROM user_groups AS ugs LEFT JOIN groups AS gs ON gs.gid=ugs.gid WHERE u.uid=ugs.uid GROUP BY ugs.uid) AS all_group_ids, u.shell AS shell_path, sf.mode AS shell_acl, sf.inode AS shell_inode, sf.uid AS shell_user_id, sf.gid AS shell_group_id, sf.device AS shell_device, sf.size AS shell_size, sf.atime AS shell_access_time, sf.mtime AS shell_modify_time, sf.ctime AS shell_change_time, sf.hard_links AS shell_hard_links, sh.md5 AS shell_md5, sh.sha1 AS shell_sha1, sh.sha256 AS shell_sha256, u.directory AS home_path, hf.mode AS home_acl, hf.inode AS home_inode, hf.uid AS home_user_id, hf.gid AS home_group_id, hf.device AS home_device, hf.atime AS home_access_time, hf.mtime AS home_modify_time, hf.ctime AS home_change_time, hf.hard_links AS home_hard_links FROM users AS u LEFT JOIN groups AS g ON u.gid=g.gid LEFT JOIN file AS sf ON sf.path=u.shell LEFT JOIN file AS hf ON hf.path=u.directory LEFT JOIN hash AS sh ON sh.path=u.shell LEFT JOIN time AS t;",
      "interval" : "7200",
      "platform": "posix",
      "version" : "1.4.5",
      "description" : "Retrieves all the jobs scheduled in crontab in the target system.",
      "value" : "Identify malware that uses this persistence mechanism to launch at a given interval"
    },

   "@listenning-ports": {
      "query": "SELECT p.* , datetime(p.start_time, 'unixepoch', 'localtime') AS start_time , p.name,  p.cmdline, p.cwd, p.parent , address, port, (CASE family  WHEN 2 THEN 'IP4'   WHEN 10 THEN 'IP6'   ELSE family END) AS family, (CASE protocol WHEN 27 THEN 'RDP' WHEN 6 THEN 'TCP'  WHEN 17 THEN 'UDP' ELSE protocol END) AS protocol, COALESCE(NULLIF(pos.path,''), p.path) AS path FROM listening_ports AS pos inner join processes AS p ON p.pid =pos.pid   WHERE   port != 0 AND pos.pid > 0;",
      "interval": 60,
      "description": "File events collected from file integrity monitoring"
          },


  "behavioral_reverse_shell": {
      "query": "SELECT DISTINCT(processes.pid), datetime(processes.start_time, 'unixepoch', 'localtime') AS start_time ,processes.parent, processes.name, processes.path, processes.cmdline, processes.cwd, processes.root, processes.uid, processes.gid, processes.start_time, process_open_sockets.remote_address, process_open_sockets.remote_port, (SELECT cmdline FROM processes AS parent_cmdline WHERE pid=processes.parent) AS parent_cmdline FROM processes JOIN process_open_sockets USING (pid) LEFT OUTER JOIN process_open_files ON processes.pid = process_open_files.pid WHERE (name='sh' OR name='bash') AND remote_address NOT IN ('0.0.0.0', '::', '') AND remote_address NOT LIKE '10.%' AND remote_address NOT LIKE '192.168.%';",
      "interval": 60,
      "description": "Find shell processes that have open sockets"
    }

	}
}
